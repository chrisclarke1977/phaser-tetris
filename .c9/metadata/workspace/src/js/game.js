{"filter":false,"title":"game.js","tooltip":"/src/js/game.js","undoManager":{"mark":12,"position":12,"stack":[[{"group":"doc","deltas":[{"start":{"row":46,"column":0},"end":{"row":48,"column":0},"action":"remove","lines":["\t            {\"name\": \"splat\", \"source\": 'splat.mp3'},","\t            {\"name\": \"walk\", \"source\": 'walk.mp3'}",""]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":0},"end":{"row":45,"column":0},"action":"remove","lines":["\t\t    \t{\"name\": \"casing\", \"source\": 'casing.mp3' },","\t\t    \t{\"name\": \"fire\", \"source\": 'fire.mp3'},",""]}]}],[{"group":"doc","deltas":[{"start":{"row":43,"column":55},"end":{"row":43,"column":56},"action":"remove","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":65,"column":0},"end":{"row":68,"column":0},"action":"remove","lines":["                this.cache.isSoundDecoded('fire') &&","                this.cache.isSoundDecoded('reload') &&","                this.cache.isSoundDecoded('splat') &&",""]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":43},"end":{"row":64,"column":49},"action":"remove","lines":["casing"]},{"start":{"row":64,"column":43},"end":{"row":64,"column":44},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":44},"end":{"row":64,"column":45},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":45},"end":{"row":64,"column":46},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":46},"end":{"row":64,"column":47},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":47},"end":{"row":64,"column":48},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":43},"end":{"row":64,"column":48},"action":"remove","lines":["reloa"]},{"start":{"row":64,"column":43},"end":{"row":64,"column":49},"action":"insert","lines":["reload"]}]}],[{"group":"doc","deltas":[{"start":{"row":64,"column":51},"end":{"row":65,"column":49},"action":"remove","lines":[" &&","                this.cache.isSoundDecoded('walk')"]}]}],[{"group":"doc","deltas":[{"start":{"row":61,"column":0},"end":{"row":62,"column":0},"action":"remove","lines":["        //  Make sure all our mp3s have decoded before starting the game",""]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":250,"column":1},"action":"remove","lines":["var Tetris = {","    intro: 0,","    playing: 1,","    paused: 2,","    over: 3,","    win: 4","},","debug = function(){","\tconsole.log(arguments);","}","Tetris.Boot = function (game) {","};","Tetris.Boot.prototype = {","    preload: function () {","        this.load.image('preload', 'assets/preload.png');","    },","    create: function () {","        this.input.maxPointers = 1;","        this.state.start('Preloader');","    }","};","Tetris.Preloader = function (game) {","    this.logo = null;","    this.preloadBar = null;","    this.ready = false;","};","Tetris.Preloader.prototype = {","    init: function () {","    },","    preload: function () {","        this.preloadBar = this.add.sprite(120, 260, 'preload');","        this.load.setPreloadSprite(this.preloadBar);","        var i, v, ","        \timagesrc = 'assets/',","        \taudiosrc = 'assets/', ","        \timages = [","\t            {\"name\": \"intro\", \"source\": 'intro.png' },","\t\t        {\"name\": \"playing\", \"source\": 'playing.png' },","\t\t        {\"name\": \"paused\", \"source\": 'paused.png' },","\t\t        {\"name\": \"over\", \"source\": 'over.png' },","\t\t        {\"name\": \"win\", \"source\": 'win.png' }","    \t\t],","    \t\taudio = [","\t            {\"name\": \"reload\", \"source\": 'reload.mp3'}","    \t\t];","","        this.load.bitmapFont('font', imagesrc+'font.png', imagesrc+'font.xml');","","        for (i in images){","        \tv = images[i];","        \tthis.load.image(v.name, imagesrc+v.source);","    \t}","        ","        for (i in audio){","        \tv = audio[i];","        \tthis.load.audio(v.name, audiosrc+v.source);","    \t}","    },","    create: function () {","    },","    update: function () {","        if (!this.ready)","        {","            if (this.cache.isSoundDecoded('reload'))","            {","                this.ready = true;","                this.state.start('Game');","            }","        }","    }","};","Tetris.Game = function (game) {","    this.mode = Tetris.intro;","    this.surface = null;","};","Tetris.Game.prototype = {","    create: function () {","        this.surface = this.add.sprite(0, 0, 'intro');","        this.helpText = this.add.bitmapText(630, 350, 'font', \"Tetris inspired game of Tetris\", 16);","        this.helpText.align = 'right';","        this.scoreText = this.add.bitmapText(320, 50, 'font', \"Score \", 16);","        this.scoreText.visible = false;","        this.pausedText = this.add.bitmapText(320, 70, 'font', \"Paused!\", 16);","        this.pausedText.visible = false;","\t\tthis.keyText = this.add.bitmapText(320, 90, 'font', \"-\", 16);","        this.keyText.visible = false;","\t\tthis.nextText = this.add.bitmapText(320, 110, 'font', \"Next\", 16);","        this.nextText.visible = false;","        this.mode = Tetris.intro;","        this.omode = Tetris.intro;","        this.score = 0;","        this.grid = [];","\t\tthis.cursors = this.input.keyboard.createCursorKeys();","        this.input.onDown.add(this.onDown, this);","    },","    mood: function(pointer){","    \tswitch (this.mode)","        {","            case Tetris.intro:","                this.start();","                break;","            case Tetris.playing:","                this.main();","                break;","            case Tetris.paused:","                this.paused();","                break;","            case Tetris.win:","            \tthis.win();","            \tbreak;","            case Tetris.over:","                this.quit();","                break;","        }","    },","    onDown: function (pointer) {","    \tthis.mood(pointer);","    },","    update: function () {","\t\tdebug(\"update\", this.mode);","\t\tthis.scoreText.text = \"Score: \"+this.score;","\t\tthis.omode = this.mode;","    \tif(this.score > 250){","        \tthis.mode = Tetris.win;","        }","       \tif (this.mode == Tetris.paused) {","     \t\tif(this.input.keyboard.isDown(Phaser.Keyboard.P)){","        \t\tthis.keyText.text = \"P\";","        \t\tthis.mode = Tetris.playing;","        \t}","    \t} else if (this.mode == Tetris.win) {","        \tif(this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {","        \t\tthis.mode = Tetris.intro;","\t        }","\t    } else {","\t\t\tif(this.input.keyboard.isDown(Phaser.Keyboard.P)){","        \t\tthis.keyText.text = \"P\";","        \t\tthis.mode = Tetris.paused;","        \t}","    \t\tif(this.input.keyboard.isDown(Phaser.Keyboard.ESC)){","        \t\tdebug(\"esc\");","        \t\tthis.mode = Tetris.over;","\t\t\t}","        \tif (this.cursors.left.isDown ) {","            \tthis.keyText.text = \"Left\";","            \tthis.moveLeft();","            } else if (this.cursors.right.isDown ) {","            \tthis.keyText.text = \"Right\";","            \tthis.moveRight();","            } else if (this.cursors.up.isDown ) {","            \tthis.keyText.text = \"Up\";","            \tthis.rotate();","            } else if (this.cursors.down.isDown) {","            \tthis.keyText.text = \"Down\";","            \tthis.moveDown();","            } ","\t\t\tif(this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {","\t       \t\tthis.drop();","\t        }","    \t}","        if(this.mode !== this.omode){","        \tthis.mood();","        }","\t},","\tdrop: function () {","\t\tdebug(\"drop\");","","\t},","\trotate: function () {","\t\tdebug(\"rotate\");","","\t},","\tmoveDown: function () {","\t\tdebug(\"moveDown\");","","\t},","\tmoveRight: function () {","\t\tdebug(\"moveRight\");","","\t},","\tmoveLeft: function () {","\t\tdebug(\"moveLeft\");","","\t},","    start: function () {","        debug(\"start\");","        this.mode = Tetris.playing;","        this.sound.play('walk');","        this.score = 0;","        this.grid = [];","        this.mood();","    },","\tmain: function (){","        debug(\"main\");","        this.surface.loadTexture('playing');","        this.helpText.text = \"Keys Esc-Quit P-Pause Arrows\";","        this.scoreText.visible = true;","\t\tthis.keyText.visible = true;","\t\tthis.nextText.visible = true;","\t\tthis.pausedText.visible = false;","\t},","    paused: function (){","        debug(\"paused\");","        this.surface.loadTexture('paused');","        this.pausedText.visible = true;","        this.keyText.visible = false;            ","    },","\twin: function (){","        debug(\"Win\");","        this.surface.loadTexture('win');","        this.keyText.visible = false;","        this.pausedText.visible = false;","        this.helpText.text  = \"You WIN! Press Space to restart\";","\t},","    quit: function () {","\t\tdebug(\"quit\");","        this.mode = Tetris.intro;","        this.omode = Tetris.intro;","        this.surface.loadTexture('intro');","        this.helpText.text = \"Game over Restart the game\";","\t\tthis.helpText.visible = true;","        this.scoreText.visible = false;","\t\tthis.keyText.visible = false;","\t\tthis.nextText.visible = false;","\t\tthis.pausedText.visible = false;","        this.score = 0;","        this.sound.play('reload');            ","    },","    preRender: function () {","        if (this.helpText)","        {","            this.helpText.pivot.x = this.helpText.textWidth;","        }","    }","};","if (document.readyState === 'complete' || document.readyState === 'interactive')","{","    start();","}","else","{","    document.addEventListener('DOMContentLoaded', start, false);","}","function start () {","    document.removeEventListener('DOMContentLoaded', start, false);","    var game = new Phaser.Game(640, 480, Phaser.AUTO, 'game');","    game.state.add('Boot', Tetris.Boot);","    game.state.add('Preloader', Tetris.Preloader);","    game.state.add('Game', Tetris.Game);","    game.state.start('Boot');","}"]},{"start":{"row":0,"column":0},"end":{"row":253,"column":1},"action":"insert","lines":["var DEBUG = true, Tetris = {","    intro: 0,","    playing: 1,","    paused: 2,","    over: 3,","    win: 4","},","debug = function(){","\tif(DEBUG){","\t\tconsole.log(arguments);\t","\t}\t","}","Tetris.Boot = function (game) {","};","Tetris.Boot.prototype = {","    preload: function () {","        this.load.image('preload', 'assets/preload.png');","    },","    create: function () {","        this.input.maxPointers = 1;","        this.state.start('Preloader');","    }","};","Tetris.Preloader = function (game) {","    this.logo = null;","    this.preloadBar = null;","    this.ready = false;","};","Tetris.Preloader.prototype = {","    init: function () {","    },","    preload: function () {","        this.preloadBar = this.add.sprite(120, 260, 'preload');","        this.load.setPreloadSprite(this.preloadBar);","        var i, v, ","        \timagesrc = 'assets/',","        \taudiosrc = 'assets/', ","        \timages = [","\t            {\"name\": \"intro\", \"source\": 'intro.png' },","\t\t        {\"name\": \"playing\", \"source\": 'playing.png' },","\t\t        {\"name\": \"paused\", \"source\": 'paused.png' },","\t\t        {\"name\": \"over\", \"source\": 'over.png' },","\t\t        {\"name\": \"win\", \"source\": 'win.png' }","    \t\t],","    \t\taudio = [","\t            {\"name\": \"reload\", \"source\": 'reload.mp3'}","    \t\t];","","        this.load.bitmapFont('font', imagesrc+'font.png', imagesrc+'font.xml');","","        for (i in images){","        \tv = images[i];","        \tthis.load.image(v.name, imagesrc+v.source);","    \t}","        ","        for (i in audio){","        \tv = audio[i];","        \tthis.load.audio(v.name, audiosrc+v.source);","    \t}","    },","    create: function () {","    },","    update: function () {","        if (!this.ready)","        {","            if (this.cache.isSoundDecoded('reload'))","            {","                this.ready = true;","                this.state.start('Game');","            }","        }","    }","};","Tetris.Game = function (game) {","    this.mode = Tetris.intro;","    this.surface = null;","};","Tetris.Game.prototype = {","    create: function () {","        this.surface = this.add.sprite(0, 0, 'intro');","        this.helpText = this.add.bitmapText(630, 350, 'font', \"Tetris inspired game of Tetris\", 16);","        this.helpText.align = 'right';","        this.scoreText = this.add.bitmapText(320, 50, 'font', \"Score \", 16);","        this.scoreText.visible = false;","        this.pausedText = this.add.bitmapText(320, 70, 'font', \"Paused!\", 16);","        this.pausedText.visible = false;","\t\tthis.keyText = this.add.bitmapText(320, 90, 'font', \"-\", 16);","        this.keyText.visible = false;","\t\tthis.nextText = this.add.bitmapText(320, 110, 'font', \"Next\", 16);","        this.nextText.visible = false;","        this.mode = Tetris.intro;","        this.omode = Tetris.intro;","        this.score = 0;","        this.grid = [];","\t\tthis.cursors = this.input.keyboard.createCursorKeys();","        this.input.onDown.add(this.onDown, this);","    },","    mood: function(){","    \tswitch (this.mode)","        {","            case Tetris.intro:","                this.start();","                break;","            case Tetris.playing:","                this.main();","                break;","            case Tetris.paused:","                this.paused();","                break;","            case Tetris.win:","            \tthis.win();","            \tbreak;","            case Tetris.over:","                this.quit();","                break;","        }","    },","    onDown: function () {","    \tthis.mood();","    },","    update: function () {","\t\tdebug(\"update\", this.mode);","\t\tthis.scoreText.text = \"Score: \"+this.score;","\t\tthis.omode = this.mode;","    \tif(this.score > 250){","        \tthis.mode = Tetris.win;","        }","       \tif (this.mode == Tetris.paused) {","     \t\tif(this.input.keyboard.isDown(Phaser.Keyboard.P)){","        \t\tthis.keyText.text = \"P\";","        \t\tthis.mode = Tetris.playing;","        \t}","    \t} else if (this.mode == Tetris.win) {","        \tif(this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {","        \t\tthis.mode = Tetris.intro;","\t        }","\t    } else {","\t\t\tif(this.input.keyboard.isDown(Phaser.Keyboard.P)){","        \t\tthis.keyText.text = \"P\";","        \t\tthis.mode = Tetris.paused;","        \t}","    \t\tif(this.input.keyboard.isDown(Phaser.Keyboard.ESC)){","        \t\tdebug(\"esc\");","        \t\tthis.mode = Tetris.over;","\t\t\t}","        \tif (this.cursors.left.isDown ) {","            \tthis.keyText.text = \"Left\";","            \tthis.moveLeft();","            } else if (this.cursors.right.isDown ) {","            \tthis.keyText.text = \"Right\";","            \tthis.moveRight();","            } else if (this.cursors.up.isDown ) {","            \tthis.keyText.text = \"Rotate\";","            \tthis.rotate();","            } else if (this.cursors.down.isDown) {","            \tthis.keyText.text = \"Down\";","            \tthis.moveDown();","            } ","\t\t\tif(this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {","\t       \t\tthis.keyText.text = \"Drop\";","\t       \t\tthis.drop();","\t        }","    \t}","        if(this.mode !== this.omode){","        \tthis.mood();","        }","\t},","\tdrop: function () {","\t\tdebug(\"drop\");","","\t},","\trotate: function () {","\t\tdebug(\"rotate\");","","\t},","\tmoveDown: function () {","\t\tdebug(\"moveDown\");","","\t},","\tmoveRight: function () {","\t\tdebug(\"moveRight\");","","\t},","\tmoveLeft: function () {","\t\tdebug(\"moveLeft\");","","\t},","    start: function () {","        debug(\"start\");","        this.mode = Tetris.playing;","        this.sound.play('walk');","        this.score = 0;","        this.grid = [];","        this.mood();","    },","\tmain: function (){","        debug(\"main\");","        this.surface.loadTexture('playing');","        this.helpText.text = \"Keys Esc-Quit P-Pause Arrows \\n And Space to drop\";","        this.scoreText.visible = true;","\t\tthis.keyText.visible = true;","\t\tthis.nextText.visible = true;","\t\tthis.pausedText.visible = false;","\t},","    paused: function (){","        debug(\"paused\");","        this.surface.loadTexture('paused');","        this.pausedText.visible = true;","        this.keyText.visible = false;            ","    },","\twin: function (){","        debug(\"Win\");","        this.surface.loadTexture('win');","        this.keyText.visible = false;","        this.pausedText.visible = false;","        this.helpText.text  = \"You WIN! Press Space to restart\";","\t},","    quit: function () {","\t\tdebug(\"quit\");","        this.mode = Tetris.intro;","        this.omode = Tetris.intro;","        this.surface.loadTexture('intro');","        this.helpText.text = \"Game over Restart the game\";","\t\tthis.helpText.visible = true;","        this.scoreText.visible = false;","\t\tthis.keyText.visible = false;","\t\tthis.nextText.visible = false;","\t\tthis.pausedText.visible = false;","        this.score = 0;","        this.sound.play('reload');            ","    },","    preRender: function () {","        if (this.helpText)","        {","            this.helpText.pivot.x = this.helpText.textWidth;","        }","    }","};","if (document.readyState === 'complete' || document.readyState === 'interactive')","{","    start();","}","else","{","    document.addEventListener('DOMContentLoaded', start, false);","}","function start () {","    document.removeEventListener('DOMContentLoaded', start, false);","    var game = new Phaser.Game(640, 480, Phaser.AUTO, 'game');","    game.state.add('Boot', Tetris.Boot);","    game.state.add('Preloader', Tetris.Preloader);","    game.state.add('Game', Tetris.Game);","    game.state.start('Boot');","}"]}]}]]},"ace":{"folds":[],"scrolltop":2798,"scrollleft":0,"selection":{"start":{"row":253,"column":1},"end":{"row":253,"column":1},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":198,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1425746389837,"hash":"d39cacfa9b47e74206291f0cf6e19d7569418feb"}